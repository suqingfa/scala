package org.example.math

import jdk.internal.math.FloatConsts

import scala.math.pow

object ScalaFloat extends App {
  // 0x 12345678
  // 0b 0001 0010 0011 0100 0101 0110 0111 1000
  // 0b 00010010001101000101011001111000
  // 0b 0 00100100 01101000101011001111000
  // 0b 1 00100100 101101000101011001111000
  // 1 * 1.01101000101011001111000 * 2^(00100100 - 1111111)
  // 1 * 101101000101011001111000 * 2^(00100100 - 1111111 - 10111)

  val bits = 0x12345678
  val ss = bits >> 31
  val s = if (ss == 0) 1 else -1
  val e = (bits >> 23) & 0xff
  val sm = bits & 0x7fffff
  val m = if (e == 0) sm << 1 else sm | 0x800000

  println(
    s"""
       |float: ${java.lang.Float.intBitsToFloat(bits)}
       |hex: 0x ${bits.toHexString}
       |binary: 0b ${bits.toBinaryStringWithPad(32)}
       |binary: 0b ${ss.toBinaryStringWithPad(1)} ${e.toBinaryStringWithPad(8)} ${sm.toBinaryStringWithPad(23)}
       |binary: 0b ${s.toBinaryStringWithPad(1)} ${e.toBinaryStringWithPad(8)} ${m.toBinaryStringWithPad(24)}
       |value: ${(s * m * pow(2, e - 127 - 23)).toFloat}
       |""".stripMargin)

  FloatConsts.EXP_BIAS

  // +0
  // 0x00000000
  // 0000 0000 0000 0000 0000 0000 0000 0000
  // 00000000000000000000000000000000
  // 0 00000000 00000000000000000000000
  // 0 00000000 000000000000000000000000
  // 1 * 0 * 2 ^ (0 - 126 - 23)

  // 最小非规格化
  // 1.4E-45
  // 0x000000001
  // 0000 0000 0000 0000 0000 0000 0000 0001
  // 00000000000000000000000000000001
  // 0 00000000 00000000000000000000001
  // 0 00000000 000000000000000000000001
  // 1 * 1 * 2 ^ (0 - 126 - 23)

  // 最大非规格化
  // 1.1754942E-38
  // 0x007fffff
  // 0000 0000 0111 1111 1111 1111 1111 1111
  // 00000000011111111111111111111111
  // 0 00000000 11111111111111111111111
  // 0 00000000 011111111111111111111111
  // 1 * (2 ^ 23 - 1) * 2 ^ (0 - 126 - 23)

  // 最小规格化
  // 1.17549435E-38
  // 0x00800000
  // 0000 0000 1000 0000 0000 0000 0000 0000
  // 00000000100000000000000000000000
  // 0 00000001 00000000000000000000000
  // 0 00000001 100000000000000000000000
  // 1 * (2 ^ 23) * 2 ^ (1 - 127 - 23)

  // 1
  // 0x3f800000
  // 0011 1111 1000 0000 0000 0000 0000 0000
  // 00111111100000000000000000000000
  // 0 01111111 00000000000000000000000
  // 0 01111111 100000000000000000000000
  // 1 * (2 ^ 23) * 2 ^ (127 - 127 - 23)

  // 1.9999999
  // 0x3fffffff
  // 0011 1111 1111 1111 1111 1111 1111 1111
  // 00111111111111111111111111111111
  // 0 01111111 11111111111111111111111
  // 0 01111111 111111111111111111111111
  // 1 * (2 ^ 24 - 1) * 2 ^ (127 - 127 - 23)

  // 2
  // 0x40000000
  // 0100 0000 0000 0000 0000 0000 0000 0000
  // 01000000000000000000000000000000
  // 0 10000000 00000000000000000000000
  // 0 10000000 100000000000000000000000
  // 1 * (2 ^ 23) * 2 ^ (128 - 127 - 23)

  // 8388608 1*2^23
  // 0x4b000000
  // 0100 1011 0000 0000 0000 0000 0000 0000
  // 01001011000000000000000000000000
  // 0 10010110 00000000000000000000000
  // 0 10010110 100000000000000000000000
  // 1 * (2 ^ 23) * 2 ^ (150 - 127 - 23)

  // 16777215 1*2^24-1
  // 0x4b7fffff
  // 0100 1011 0111 1111 1111 1111 1111 1111
  // 01001011011111111111111111111111
  // 0 10010110 11111111111111111111111
  // 0 10010110 111111111111111111111111
  // 1 * (2 ^ 24 - 1) * 2 ^ (150 - 127 - 23)

  // 最大规格化
  // 3.4028235E38
  // 0x7f7fffff
  // 0111 1111 0111 1111 1111 1111 1111 1111
  // 01111111011111111111111111111111
  // 0 11111110 11111111111111111111111
  // 0 11111110 111111111111111111111111
  // 1 * (2 ^ 24 - 1) * 2 ^ (254 - 127 - 23)

  // +Inf
  // 0x7f800000
  // 0111 1111 1000 0000 0000 0000 0000 0000
  // 01111111100000000000000000000000
  // 0 11111111 00000000000000000000000
  // 0 11111111 100000000000000000000000

  // NaN
  // 0x7f800001
  // 0111 1111 1000 0000 0000 0000 0000 0001
  // 01111111100000000000000000000001
  // 0 11111111 00000000000000000000000
  // 0 11111111 100000000000000000000001

  // NaN
  // 0x7fffffff
  // 0111 1111 1111 1111 1111 1111 1111 1111
  // 01111111111111111111111111111111
  // 0 11111111 11111111111111111111111
  // 0 11111111 111111111111111111111111

  // -0
  // 0x80000000
  // 1000 0000 0000 0000 0000 0000 0000 0000
  // 10000000000000000000000000000000
  // 1 00000000 00000000000000000000000
  // 0 00000000 000000000000000000000000

  implicit class MyRichInt(val self: Int) {
    def toBinaryStringWithPad(length: Int): String = {
      self.toBinaryString.reverse.padTo(length, '0').reverse
    }
  }
}
